USE MASTER
GO
IF DB_ID('BASE_COBRANZA') IS NOT NULL 
	DROP DATABASE BASE_COBRANZA
GO
CREATE DATABASE BASE_COBRANZA
GO
USE BASE_COBRANZA
GO
-----------------------------------------------TABLA DISTRITO Y SUS STORE PROCEDURES-------------------------------------------------
CREATE TABLE DISTRITO(
ID_DISTRITO INT PRIMARY KEY IDENTITY(1,1),
NOMBRE VARCHAR(100)
)
GO
INSERT INTO DISTRITO VALUES ('ANCÓN'),('ATE'),('BARRANCO'),('BREÑA'),('CARABAYLLO'),('CERCADO DE LIMA'),
('CHACLACAYO'),('CHORRILLOS'),('CIENEGUILLA'),('COMAS'),('EL AGUSTINO'),('INDEPENDENCIA'),('JESÚS MARÍA'),('LA MOLINA'),('LA VICTORIA'),
('LINCE'),('LOS OLIVOS'),('LURIGANCHO'),('LURÍN'),('MAGDALENA DEL MAR'),('MIRAFLORES'),('PACHACÁMAC'),('PUCUSANA'),('PUEBLO LIBRE'),
('PUENTE PIEDRA'),('PUNTA HERMOSA'),('PUNTA NEGRA'),('RÍMAC'),('SAN BARTOLO'),('SAN BORJA'),('SAN ISIDRO'),('SAN JUAN DE LURIGANCHO'),
('SAN JUAN DE MIRAFLORES'),('SAN LUIS'),('SAN MARTIN DE PORRES'),('SAN MIGUEL'),('SANTA ANITA'),('SANTA MARÍA DEL MAR'),('SANTA ROSA'),
('SANTIAGO DE SURCO'),('SURQUILLO'),('VILLA EL SALVADOR'),('VILLA MARIA DEL TRIUNFO')
GO
IF OBJECT_ID('SP_LISTAR_DISTRITO') IS NOT NULL
	DROP PROCEDURE SP_LISTAR_DISTRITO
GO
CREATE PROCEDURE SP_LISTAR_DISTRITO
AS
BEGIN SELECT*FROM DISTRITO
END
GO
--------------------------------------------------TABLA PROCURADOR Y SUS STORE PROCEDURES----------------------------------------------
CREATE TABLE PROCURADOR(
ID_PROCURADOR INT PRIMARY KEY IDENTITY(1,1),
NOMBRE_PROCURADOR VARCHAR(255),
)
GO
CREATE TABLE PROCURADOR_DISTRITOS(
ID_PROCURADOR INT,
ID_DISTRITO INT,
PRIMARY KEY(ID_PROCURADOR,ID_DISTRITO),
CONSTRAINT FK_ID_PROCURADOR  FOREIGN KEY(ID_PROCURADOR) REFERENCES PROCURADOR(ID_PROCURADOR),
CONSTRAINT FK_ID_DISTRITO  FOREIGN KEY(ID_DISTRITO) REFERENCES DISTRITO(ID_DISTRITO)
)
GO
--Listar procurador
IF OBJECT_ID('SP_LISTAR_PROCURADOR') IS NOT NULL
	DROP PROCEDURE SP_LISTAR_PROCURADOR
GO
CREATE PROCEDURE SP_LISTAR_PROCURADOR
AS
BEGIN SELECT*FROM PROCURADOR
END
GO
--Guardar procurador
IF OBJECT_ID('SP_GUARDAR_PROCURADOR') IS NOT NULL
	DROP PROCEDURE SP_GUARDAR_PROCURADOR
GO
CREATE PROCEDURE SP_GUARDAR_PROCURADOR
@NOMBRE_PROCURADOR VARCHAR(255)
AS
BEGIN
	INSERT INTO PROCURADOR VALUES(@NOMBRE_PROCURADOR)
END
EXEC SP_LISTAR_PROCURADOR
GO
--Actualizar procurador
IF OBJECT_ID('SP_ACTUALIZAR_PROCURADOR') IS NOT NULL
	DROP PROCEDURE SP_ACTUALIZAR_PROCURADOR
GO
CREATE PROCEDURE SP_ACTUALIZAR_PROCURADOR
@ID_PROCURADOR INT,
@NOMBRE_PROCURADOR VARCHAR(255)
AS
BEGIN
    UPDATE PROCURADOR
    SET NOMBRE_PROCURADOR = @NOMBRE_PROCURADOR
    WHERE ID_PROCURADOR = @ID_PROCURADOR
END
GO
--Eliminar procurador
IF OBJECT_ID('SP_ELIMINAR_PROCURADOR') IS NOT NULL
	DROP PROCEDURE SP_ELIMINAR_PROCURADOR
GO
CREATE PROCEDURE SP_ELIMINAR_PROCURADOR
@ID_PROCURADOR INT
AS
BEGIN
    DELETE FROM PROCURADOR
    WHERE ID_PROCURADOR = @ID_PROCURADOR
END
GO
--------------------------STORE PROCEDURES PARA TABLA INTERMEDIA-----------------------------------------
IF OBJECT_ID('SP_ELIMINAR_DISTRITO_PROCURADOR') IS NOT NULL
	DROP PROCEDURE SP_ELIMINAR_DISTRITO_PROCURADOR
GO
CREATE PROCEDURE SP_ELIMINAR_DISTRITO_PROCURADOR
@ID_PROCURADOR INT,
@ID_DISTRITO INT
AS
BEGIN
    DELETE FROM PROCURADOR_DISTRITOS
    WHERE ID_PROCURADOR = @ID_PROCURADOR AND ID_DISTRITO=@ID_DISTRITO
END
GO

IF OBJECT_ID('SP_AGREGAR_DISTRITO_PROCURADOR') IS NOT NULL
	DROP PROCEDURE SP_AGREGAR_DISTRITO_PROCURADOR
GO
CREATE PROCEDURE SP_AGREGAR_DISTRITO_PROCURADOR
@ID_PROCURADOR INT,
@ID_DISTRITO INT
AS
EXEC SP_LISTAR_PROCURADOR
BEGIN
    INSERT INTO PROCURADOR_DISTRITOS
    VALUES (@ID_PROCURADOR,@ID_DISTRITO)
END
GO
IF OBJECT_ID('SP_LISTAR_DISTRITOS_PROCURADOR') IS NOT NULL
	DROP PROCEDURE SP_LISTAR_DISTRITOS_PROCURADOR
GO
CREATE PROCEDURE SP_LISTAR_DISTRITOS_PROCURADOR
@ID_PROCURADOR INT
AS
BEGIN
    SELECT PD.ID_DISTRITO,D.NOMBRE FROM PROCURADOR_DISTRITOS PD 
										INNER JOIN DISTRITO D ON D.ID_DISTRITO=PD.ID_DISTRITO WHERE PD.ID_PROCURADOR=@ID_PROCURADOR 
END
GO
CREATE PROCEDURE SP_BUSCAR_DISTRITO_NOMBRE
@NOMBRE VARCHAR(255)
AS 
BEGIN SELECT*FROM DISTRITO WHERE NOMBRE=@NOMBRE
END
GO
CREATE PROCEDURE SP_LISTAR_PROCURADORES_DISTRITO
AS
BEGIN
	SELECT P.ID_PROCURADOR, P.NOMBRE_PROCURADOR, D.NOMBRE AS DISTRITO
    FROM PROCURADOR P
    LEFT JOIN PROCURADOR_DISTRITOS PD ON P.ID_PROCURADOR = PD.ID_PROCURADOR
    LEFT JOIN DISTRITO D ON PD.ID_DISTRITO = D.ID_DISTRITO
END
GO
CREATE PROCEDURE SP_ELIMINAR_DISTRITOS_PROCURADOR
@ID_PROCURADOR INT
AS
BEGIN
    DELETE FROM PROCURADOR_DISTRITOS
    WHERE ID_PROCURADOR = @ID_PROCURADOR
END
GO


CREATE PROCEDURE SP_ELIMINAR_PROCURADOR_F
    @ID_PROCURADOR INT
AS
BEGIN
    BEGIN TRY
        -- Inicia una transacción
        BEGIN TRANSACTION

        -- Elimina los distritos asignados al procurador
        EXEC SP_ELIMINAR_DISTRITOS_PROCURADOR @ID_PROCURADOR

        -- Ahora puedes eliminar al procurador
        DELETE FROM PROCURADOR WHERE ID_PROCURADOR = @ID_PROCURADOR

        -- Confirma la transacción si todo se ejecuta correctamente
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        -- En caso de error, revierte la transacción
        ROLLBACK TRANSACTION
        -- Devuelve el mensaje de error
        THROW
    END CATCH
END

GO
--------------------------------------------------TABLA APODERADO Y SUS STORE PROCEDURES----------------------------------------------
CREATE TABLE APODERADO(
ID_APODERADO INT PRIMARY KEY IDENTITY(1,1),
NOMBRE_APODERADO VARCHAR(255)
)
GO
--Listar apoderado
IF OBJECT_ID('SP_LISTAR_APODERADO') IS NOT NULL
	DROP PROCEDURE SP_LISTAR_APODERADO
GO
CREATE PROCEDURE SP_LISTAR_APODERADO
AS
BEGIN SELECT*FROM APODERADO
END
GO
--Guardar apoderado
IF OBJECT_ID('SP_GUARDAR_APODERADO') IS NOT NULL
	DROP PROCEDURE SP_GUARDAR_APODERADO
GO
CREATE PROCEDURE SP_GUARDAR_APODERADO
@NOMBRE_APODERADO VARCHAR(255)
AS
BEGIN
	INSERT INTO APODERADO VALUES(@NOMBRE_APODERADO)
END
GO
--Actualizar apoderado
IF OBJECT_ID('SP_ACTUALIZAR_APODERADO') IS NOT NULL
	DROP PROCEDURE SP_ACTUALIZAR_APODERADO
GO
CREATE PROCEDURE SP_ACTUALIZAR_APODERADO
@ID_APODERADO INT,
@NOMBRE_APODERADO VARCHAR(255)
AS
BEGIN
    UPDATE APODERADO
    SET NOMBRE_APODERADO = @NOMBRE_APODERADO
    WHERE ID_APODERADO = @ID_APODERADO
END
GO
--Eliminar procurador
IF OBJECT_ID('SP_ELIMINAR_APODERADO') IS NOT NULL
	DROP PROCEDURE SP_ELIMINAR_APODERADO
GO
CREATE PROCEDURE SP_ELIMINAR_APODERADO
@ID_APODERADO INT
AS
BEGIN
    DELETE FROM APODERADO
    WHERE ID_APODERADO = @ID_APODERADO
END
GO


---------------------------------------------------ROLES Y USUARIOS--------------------------------------------------------------------
CREATE TABLE ROL (
    ID_ROL INT PRIMARY KEY IDENTITY(1,1),
    NOMBRE VARCHAR(255) NOT NULL
)
GO

-- Tabla de Usuarios
CREATE TABLE USUARIO (
    ID_USUARIO INT PRIMARY KEY IDENTITY(1,1),
    NOMBRE_USUARIO VARCHAR(255) NOT NULL,
    CONTRA_USUARIO VARCHAR(255) NOT NULL
)
GO
-- Tabla intermedia UsuariosRoles para establecer la relación muchos a muchos
CREATE TABLE USUARIOS_ROLES (
    ID_USUARIO INT,
    ID_ROL INT,
    PRIMARY KEY (ID_USUARIO, ID_ROL),
    FOREIGN KEY (ID_USUARIO) REFERENCES USUARIO(ID_USUARIO),
    FOREIGN KEY (ID_ROL) REFERENCES ROL(ID_ROL)
)
GO
----------STORE PROCEDURES PARA ROLES Y USUARIOS
CREATE PROCEDURE SP_ELIMINAR_USUARIO
    @ID_USUARIO INT
AS
BEGIN
    DELETE FROM USUARIO
    WHERE ID_USUARIO = @ID_USUARIO
END
GO
CREATE PROCEDURE SP_ELIMINAR_ROL
    @ID_ROL INT
AS
BEGIN
    DELETE FROM ROL
    WHERE ID_ROL = @ID_ROL
END
GO
CREATE PROCEDURE SP_ELIMINAR_ROL_USUARIO
    @ID_USUARIO INT,
    @ID_ROL INT
AS
BEGIN
    DELETE FROM USUARIOS_ROLES
    WHERE ID_USUARIO = @ID_USUARIO AND ID_ROL = @ID_ROL;
END
GO
CREATE PROCEDURE SP_BUSCAR_USUARIO_POR_NOMBRE
    @NOMBRE_USUARIO VARCHAR(255)
AS
BEGIN
    SELECT *
    FROM USUARIO
    WHERE NOMBRE_USUARIO = @NOMBRE_USUARIO;
END
GO
CREATE PROCEDURE SP_BUSCAR_ROL_POR_NOMBRE
    @NOMBRE VARCHAR(255)
AS
BEGIN
    SELECT *
    FROM ROL
    WHERE NOMBRE = @NOMBRE
END
GO
CREATE PROCEDURE SP_ACTUALIZAR_USUARIO
    @ID_USUARIO INT,
    @NOMBRE_USUARIO VARCHAR(255),
    @CONTRA_USUARIO VARCHAR(255)
AS
BEGIN
    UPDATE USUARIO
    SET NOMBRE_USUARIO = @NOMBRE_USUARIO, CONTRA_USUARIO = @CONTRA_USUARIO
    WHERE ID_USUARIO = @ID_USUARIO
END
GO
CREATE PROCEDURE SP_ACTUALIZAR_ROL
    @ID_ROL INT,
    @NOMBRE VARCHAR(255)
AS
BEGIN
    UPDATE ROL
    SET NOMBRE = @NOMBRE
    WHERE ID_ROL = @ID_ROL;
END
GO
CREATE PROCEDURE SP_GUARDAR_USUARIO
    @NOMBRE_USUARIO VARCHAR(255),
    @CONTRA_USUARIO VARCHAR(255)
AS
BEGIN
    INSERT INTO USUARIO(NOMBRE_USUARIO, CONTRA_USUARIO)
    VALUES (@NOMBRE_USUARIO, @CONTRA_USUARIO)
END
GO
CREATE PROCEDURE SP_GUARDAR_ROL
    @NOMBRE VARCHAR(50)
AS
BEGIN
    INSERT INTO ROL (NOMBRE)
    VALUES (@NOMBRE)
END
GO
CREATE PROCEDURE SP_ASIGNAR_ROL_USUARIO
    @ID_USUARIO INT,
    @ID_ROL INT
AS
BEGIN
    INSERT INTO USUARIOS_ROLES (ID_USUARIO, ID_ROL)
    VALUES (@ID_USUARIO, @ID_ROL)
END
GO
CREATE PROCEDURE SP_LISTAR_USUARIOS_ROLES
AS
BEGIN
	SELECT u.ID_USUARIO, u.NOMBRE_USUARIO, u.CONTRA_USUARIO, r.Nombre AS Rol
    FROM USUARIO u
    LEFT JOIN USUARIOS_ROLES ur ON u.ID_USUARIO = ur.ID_USUARIO
    LEFT JOIN ROL r ON ur.ID_ROL = r.ID_ROL
END
GO
CREATE PROCEDURE SP_LISTAR_ROLES_USUARIO
    @ID_USUARIO INT
AS
BEGIN
    SELECT R.* FROM ROL R
    INNER JOIN USUARIOS_ROLES UR ON R.ID_ROL = UR.ID_ROL
    WHERE UR.ID_USUARIO = @ID_USUARIO
END
GO
CREATE PROCEDURE SP_LISTAR_USUARIO
AS
BEGIN
    SELECT*FROM USUARIO
END
GO
CREATE PROCEDURE SP_LISTAR_ROL
AS
BEGIN
    SELECT * FROM ROL;
END
GO
CREATE PROCEDURE SP_SEGURIDAD_USUARIO
@usu varchar(255),
@clav varchar(255)
AS
SELECT NOMBRE_USUARIO,CONTRA_USUARIO FROM USUARIO WHERE NOMBRE_USUARIO=@usu and CONTRA_USUARIO=@clav
GO
if OBJECT_ID('SP_ELIMINAR_ROLES_USUARIO') is not null
	drop procedure SP_ELIMINAR_ROLES_USUARIO
go
CREATE PROCEDURE SP_ELIMINAR_ROLES_USUARIO
@ID_USUARIO INT
AS
BEGIN
    DELETE FROM USUARIOS_ROLES
    WHERE ID_USUARIO = @ID_USUARIO
END
GO

CREATE PROCEDURE SP_ELIMINAR_USUARIO_F
    @ID_USUARIO INT
AS
BEGIN
    BEGIN TRY
        -- Inicia una transacción
        BEGIN TRANSACTION

        -- Elimina los distritos asignados al procurador
        EXEC SP_ELIMINAR_ROLES_USUARIO @ID_USUARIO

        -- Ahora puedes eliminar al procurador
        DELETE FROM USUARIO WHERE ID_USUARIO = @ID_USUARIO

        -- Confirma la transacción si todo se ejecuta correctamente
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        -- En caso de error, revierte la transacción
        ROLLBACK TRANSACTION
        -- Devuelve el mensaje de error
        THROW
    END CATCH
END
GO 
------------------------------------------------TABLA STATUS JUDICIAL Y STORE PROCEDURES----------------------------------------------
CREATE TABLE STATUS_JUDICIAL(
ID_STATUS_JUDICIAL INT PRIMARY KEY IDENTITY(1,1),
ACCION VARCHAR(255)
)
GO
CREATE PROCEDURE SP_LISTAR_STATUS_JUDICIAL
AS
BEGIN
	SELECT*FROM STATUS_JUDICIAL
END
GO
CREATE PROCEDURE SP_GUARDAR_STATUS_JUDICIAL
@ACCION VARCHAR(255)
AS
BEGIN
	INSERT INTO STATUS_JUDICIAL VALUES(@ACCION)
END
GO
CREATE PROCEDURE SP_ACTUALIZAR_STATUS_JUDICIAL
    @ID_STATUS_JUDICIAL INT,
    @ACCION VARCHAR(255)
AS
BEGIN
    UPDATE STATUS_JUDICIAL
    SET ACCION = @ACCION
    WHERE ID_STATUS_JUDICIAL = @ID_STATUS_JUDICIAL;
END
GO
CREATE PROCEDURE SP_ELIMINAR_STATUS_JUDICIAL
    @ID_STATUS_JUDICIAL INT
AS
BEGIN
    DELETE FROM STATUS_JUDICIAL
    WHERE ID_STATUS_JUDICIAL = @ID_STATUS_JUDICIAL
END
GO
------------------------------------------------------TABLA STATUS PODER JUDICIAL Y STORE PROCEDURES---------------------------------
CREATE TABLE STATUS_PODER_JUDICIAL(
ID_STATUS_PODER_JUDICIAL INT PRIMARY KEY IDENTITY(1,1),
ACCION VARCHAR(255)
)
GO
CREATE PROCEDURE SP_LISTAR_STATUS_PODER_JUDICIAL
AS
BEGIN
	SELECT*FROM STATUS_PODER_JUDICIAL
END
GO
CREATE PROCEDURE SP_GUARDAR_STATUS_PODER_JUDICIAL
@ACCION VARCHAR(255)
AS
BEGIN
	INSERT INTO STATUS_PODER_JUDICIAL VALUES(@ACCION)
END
GO
CREATE PROCEDURE SP_ACTUALIZAR_STATUS_PODER_JUDICIAL
    @ID_STATUS_PODER_JUDICIAL INT,
    @ACCION VARCHAR(255)
AS
BEGIN
    UPDATE STATUS_PODER_JUDICIAL
    SET ACCION = @ACCION
    WHERE ID_STATUS_PODER_JUDICIAL = @ID_STATUS_PODER_JUDICIAL
END
GO
CREATE PROCEDURE SP_ELIMINAR_STATUS_PODER_JUDICIAL
    @ID_STATUS_PODER_JUDICIAL INT
AS
BEGIN
    DELETE FROM STATUS_PODER_JUDICIAL
    WHERE ID_STATUS_PODER_JUDICIAL = @ID_STATUS_PODER_JUDICIAL
END
GO
---------------------------------------------------TABLA TIPO DE IMPULSO Y STORE PROCEDURES-------------------------------------------- 
CREATE TABLE TIPO_IMPULSO(
ID_TIPO_IMPULSO INT PRIMARY KEY IDENTITY(1,1),
ACCION VARCHAR(255)
)
GO
CREATE PROCEDURE SP_LISTAR_TIPO_IMPULSO
AS
BEGIN
	SELECT*FROM TIPO_IMPULSO
END
GO
CREATE PROCEDURE SP_GUARDAR_TIPO_IMPULSO
@ACCION VARCHAR(255)
AS
BEGIN
	INSERT INTO TIPO_IMPULSO VALUES(@ACCION)
END
GO
CREATE PROCEDURE SP_ACTUALIZAR_TIPO_IMPULSO
    @ID_TIPO_IMPULSO INT,
    @ACCION VARCHAR(255)
AS
BEGIN
    UPDATE TIPO_IMPULSO
    SET ACCION = @ACCION
    WHERE ID_TIPO_IMPULSO = @ID_TIPO_IMPULSO
END
GO
CREATE PROCEDURE SP_ELIMINAR_TIPO_IMPULSO
    @ID_TIPO_IMPULSO INT
AS
BEGIN
    DELETE FROM TIPO_IMPULSO
    WHERE ID_TIPO_IMPULSO = @ID_TIPO_IMPULSO
END
GO
---------------------------------------------------TABLA STATUS ARBITRAJE Y STORE PROCEDURES-------------------------------------------
CREATE TABLE STATUS_ARBITRAJE(
ID_STATUS_ARBITRAJE INT PRIMARY KEY IDENTITY(1,1),
ACCION VARCHAR(255)
)
GO
CREATE PROCEDURE SP_LISTAR_STATUS_ARBITRAJE
AS
BEGIN
	SELECT*FROM STATUS_ARBITRAJE
END
GO
CREATE PROCEDURE SP_GUARDAR_STATUS_ARBITRAJE
@ACCION VARCHAR(255)
AS
BEGIN
	INSERT INTO STATUS_ARBITRAJE VALUES(@ACCION)
END
GO
CREATE PROCEDURE SP_ACTUALIZAR_STATUS_ARBITRAJE
    @ID_STATUS_ARBITRAJE INT,
    @ACCION VARCHAR(255)
AS
BEGIN
    UPDATE STATUS_ARBITRAJE
    SET ACCION = @ACCION
    WHERE ID_STATUS_ARBITRAJE = @ID_STATUS_ARBITRAJE
END
GO
CREATE PROCEDURE SP_ELIMINAR_STATUS_ARBITRAJE
    @ID_STATUS_ARBITRAJE INT
AS
BEGIN
    DELETE FROM STATUS_ARBITRAJE
    WHERE ID_STATUS_ARBITRAJE = @ID_STATUS_ARBITRAJE
END
GO
----------------------------------------------TABLA DEMANDA PRINCIPAL Y STORE PROCEDURES-----------------------------------------------
CREATE TABLE DEMANDA_PRINCIPAL(
ID_DEMANDA_PRINCIPAL INT PRIMARY KEY IDENTITY(1,1),
ACCION VARCHAR(255)
)
GO
CREATE PROCEDURE SP_LISTAR_DEMANDA_PRINCIPAL
AS
BEGIN
	SELECT*FROM DEMANDA_PRINCIPAL
END
GO
CREATE PROCEDURE SP_GUARDAR_DEMANDA_PRINCIPAL
@ACCION VARCHAR(255)
AS
BEGIN
	INSERT INTO DEMANDA_PRINCIPAL VALUES(@ACCION)
END
GO
CREATE PROCEDURE SP_ACTUALIZAR_DEMANDA_PRINCIPAL
    @ID_DEMANDA_PRINCIPAL INT,
    @ACCION VARCHAR(255)
AS
BEGIN
    UPDATE DEMANDA_PRINCIPAL
    SET ACCION = @ACCION
    WHERE ID_DEMANDA_PRINCIPAL = @ID_DEMANDA_PRINCIPAL
END
GO
CREATE PROCEDURE SP_ELIMINAR_DEMANDA_PRINCIPAL
    @ID_DEMANDA_PRINCIPAL INT
AS
BEGIN
    DELETE FROM DEMANDA_PRINCIPAL
    WHERE ID_DEMANDA_PRINCIPAL = @ID_DEMANDA_PRINCIPAL
END
GO
------------------------------------------------TABLA PASO COBRANZA Y STORE PROCEDURES------------------------------------------------
CREATE TABLE PASO_COBRANZA(
ID_PASO_COBRANZA INT PRIMARY KEY IDENTITY(1,1),
ACCION VARCHAR(255)
)
GO
CREATE PROCEDURE SP_LISTAR_PASO_COBRANZA
AS
BEGIN
	SELECT*FROM PASO_COBRANZA
END
GO
CREATE PROCEDURE SP_GUARDAR_PASO_COBRANZA
@ACCION VARCHAR(255)
AS
BEGIN
	INSERT INTO PASO_COBRANZA VALUES(@ACCION)
END
GO
CREATE PROCEDURE SP_ACTUALIZAR_PASO_COBRANZA
    @ID_PASO_COBRANZA INT,
    @ACCION VARCHAR(255)
AS
BEGIN
    UPDATE PASO_COBRANZA
    SET ACCION = @ACCION
    WHERE ID_PASO_COBRANZA = @ID_PASO_COBRANZA
END
GO
CREATE PROCEDURE SP_ELIMINAR_PASO_COBRANZA
    @ID_PASO_COBRANZA INT
AS
BEGIN
    DELETE FROM PASO_COBRANZA
    WHERE ID_PASO_COBRANZA = @ID_PASO_COBRANZA
END
GO
----------------------------------------------------------BASE GENERAL--------------------------------------------------------------------
CREATE TABLE STOCK(
ID_STOCK INT PRIMARY KEY IDENTITY(1,1),
ALBUM INT,
FECHA_CONSIGNACION DATE,
MARCA VARCHAR(255),
MODELO VARCHAR (255),
PRECIO_PACTADO DECIMAL(10,2),
CONTRATO INT,
DNI VARCHAR(8),
NOMBRE_PROPIETARIO VARCHAR(255),
TIPO VARCHAR(10),
CELULAR VARCHAR(9),
CORREO VARCHAR(255),
DIRECCION VARCHAR(255),
DISTRITO VARCHAR(100),
TIPO_PENALIDAD VARCHAR(255),
PAGARE VARCHAR(6)
)
GO
CREATE TABLE BASE_GENERAL (
    ID_BASE INT PRIMARY KEY IDENTITY(1,1),
    ID_STOCK INT, -- Valor predeterminado 0
    FECHA_COBRO DATE DEFAULT GETDATE(), -- Valor predeterminado: fecha actual
    ID_STATUS_CLIENTE INT DEFAULT 1, -- Valor predeterminado 0
    ID_DEMANDA_PRINCIPAL INT DEFAULT 1,
	FECHA_INGRESO DATE DEFAULT GETDATE(), -- Valor predeterminado: fecha actual
    FECHA_ARBITRAJE DATE DEFAULT GETDATE(), -- Valor predeterminado: fecha actual
    PENALIDAD DECIMAL(10,2) DEFAULT 0.00, -- Valor predeterminado 0.00
	MORA DECIMAL(10,2) DEFAULT 0.00, -- Valor predeterminado 0.00
    MORA_TOTAL AS
        (CASE
            WHEN DATEDIFF(DAY, FECHA_COBRO, GETDATE()) <= 2 THEN 0.00
            ELSE MORA * (DATEDIFF(DAY, FECHA_COBRO, GETDATE()) - 2)
        END), 
	GASTOS_COBRANZA DECIMAL(10,2) DEFAULT 0.00, -- Valor predeterminado 0.00
    GASTOS_COCHERA DECIMAL(10,2) DEFAULT 0.00,
	FECHA_EMBARGO DATE DEFAULT GETDATE(),
	GASTOS_COCHERA_TOTAL AS
        (CASE
            WHEN DATEDIFF(DAY, FECHA_EMBARGO, GETDATE()) <= 2 THEN 0.00
            ELSE GASTOS_COCHERA * (DATEDIFF(DAY, FECHA_EMBARGO, GETDATE()) - 2)
        END), 
    GASTO_TOTAL AS ((CASE
            WHEN DATEDIFF(DAY, FECHA_EMBARGO, GETDATE()) <= 2 THEN 0.00
            ELSE GASTOS_COCHERA * (DATEDIFF(DAY, FECHA_EMBARGO, GETDATE()) - 2)
        END) + (CASE
            WHEN DATEDIFF(DAY, FECHA_COBRO, GETDATE()) <= 2 THEN 0.00
            ELSE MORA * (DATEDIFF(DAY, FECHA_COBRO, GETDATE()) - 2)
        END)+ PENALIDAD+ GASTOS_COBRANZA),
	STATUS_SUNARP VARCHAR(255) DEFAULT '', -- Valor predeterminado: cadena vacía
    MARCA_AUTO_CAUTELAR VARCHAR(255) DEFAULT '', -- Valor predeterminado: cadena vacía
    MODELO_AUTO_CAUTELAR VARCHAR(255) DEFAULT '', -- Valor predeterminado: cadena vacía
    FECHA_AUTO_CAUTELAR DATE DEFAULT GETDATE(), -- Valor predeterminado: fecha actual
    PARTIDA_REGISTRAL_AUTO_CAUTELAR VARCHAR(8) DEFAULT '', -- Valor predeterminado: cadena vacía
    PLACA_AUTO_CAUTELAR VARCHAR(6) DEFAULT '', -- Valor predeterminado: cadena vacía
    ID_STATUS_JUDICIAL INT DEFAULT 1, -- Valor predeterminado 0
    ID_STATUS_PODER_JUDICIAL INT DEFAULT 1, -- Valor predeterminado 0
    ID_PASO_COBRANZA INT DEFAULT 1, -- Valor predeterminado 0
    FECHA_INGRESO_MC DATE DEFAULT GETDATE(), -- Valor predeterminado: fecha actual
    FECHA_CONCESORIO DATE DEFAULT GETDATE(), -- Valor predeterminado: fecha actual
     --Valor predeterminado:actual
	ID_APODERADO INT DEFAULT 1,
	ID_PROCURADOR INT DEFAULT 1, -- Valor predeterminado 0
    TIPO_JUZGADO VARCHAR(255) DEFAULT '', -- Valor predeterminado: cadena vacía
    DISTRITO_JUZGADO VARCHAR(100) DEFAULT '', -- Valor predeterminado: cadena vacía
    NUMERO_DE_JUZGADO VARCHAR(100) DEFAULT '', -- Valor predeterminado: cadena vacía
    NUMERO_EXPEDIENTE VARCHAR(100) DEFAULT '', -- Valor predeterminado: cadena vacía
    CODIGO_CAUTELAR VARCHAR(100) DEFAULT '', -- Valor predeterminado: cadena vacía
    NOMBRE_ESPECIALISTA VARCHAR(100) DEFAULT '', -- Valor predeterminado: cadena vacía
    MONTO_PETITORIO DECIMAL(10,2) DEFAULT 0.00, -- Valor predeterminado 0.00
    ID_TIPO_IMPULSO INT DEFAULT 1, -- Valor predeterminado 0
    TIPO_SOLICITUD_MEDIDA_CAUTELAR VARCHAR(255) DEFAULT '', -- Valor predeterminado: cadena vacía
    RESPUESTA_MEDIDA_CAUTELAR VARCHAR(255) DEFAULT '', -- Valor predeterminado: cadena vacía
    OBSERVACIONES VARCHAR(255) DEFAULT '' -- Valor predeterminado: cadena vacía
	CONSTRAINT FK_ID_DEMANDA_PRINCIPAL FOREIGN KEY (ID_DEMANDA_PRINCIPAL) REFERENCES DEMANDA_PRINCIPAL(ID_DEMANDA_PRINCIPAL),
	CONSTRAINT FK_ID_PASO_COBRANZA FOREIGN KEY(ID_PASO_COBRANZA) REFERENCES PASO_COBRANZA(ID_PASO_COBRANZA),
	CONSTRAINT FK_ID_APODERADO FOREIGN KEY (ID_APODERADO) REFERENCES APODERADO(ID_APODERADO),
	CONSTRAINT FK_ID_STOCK FOREIGN KEY(ID_STOCK) REFERENCES STOCK(ID_STOCK),
	CONSTRAINT FK_ID_STATUS_CLIENTE FOREIGN KEY(ID_STATUS_CLIENTE) REFERENCES STATUS_ARBITRAJE(ID_STATUS_ARBITRAJE),
	CONSTRAINT FK_ID_STATUS_JUDICIAL  FOREIGN KEY(ID_STATUS_JUDICIAL) REFERENCES STATUS_JUDICIAL(ID_STATUS_JUDICIAL),
	CONSTRAINT FK_ID_STATUS_PODER_JUDICIAL  FOREIGN KEY(ID_STATUS_PODER_JUDICIAL) REFERENCES STATUS_PODER_JUDICIAL(ID_STATUS_PODER_JUDICIAL),
	CONSTRAINT FK_ID_PROCURADOR_BG  FOREIGN KEY(ID_PROCURADOR) REFERENCES PROCURADOR(ID_PROCURADOR),
	CONSTRAINT FK_ID_TIPO_IMPULSO  FOREIGN KEY(ID_TIPO_IMPULSO) REFERENCES TIPO_IMPULSO(ID_TIPO_IMPULSO)
	)
GO
CREATE TABLE PAGO(
ID_PAGO INT PRIMARY KEY IDENTITY(1,1),
ID_BASE INT,
MONTO DECIMAL(10,2),
TIPO_PAGO VARCHAR(100),
CUENTA_BANCARIA VARCHAR(100),
NUMERO_OPERACION VARCHAR(100),
FECHA_PAGO DATE,
INSTANCIA_PAGO VARCHAR(100),
CONSTRAINT FK_ID_BASE FOREIGN KEY(ID_BASE) REFERENCES BASE_GENERAL(ID_BASE)
)
GO

----------------------------------------------------------PROCEDIMIENTOS PARA PAGO-----------------------------------------
IF OBJECT_ID('SP_LISTAR_PAGO') IS NOT NULL
	DROP PROCEDURE SP_LISTAR_PAGO
GO
CREATE PROCEDURE SP_LISTAR_PAGO
@ID_BASE INT
AS
BEGIN
	SELECT*FROM PAGO WHERE ID_BASE=@ID_BASE
END
GO
CREATE PROCEDURE SP_LISTAR_ALL_PAGO
AS
BEGIN
	SELECT*FROM PAGO
END
GO
IF OBJECT_ID('SP_GUARDAR_PAGO') IS NOT NULL
	DROP PROCEDURE SP_GUARDAR_PAGO
GO
CREATE PROCEDURE SP_GUARDAR_PAGO
@ID_BASE INT,
@MONTO DECIMAL(10,2),
@TIPO_PAGO VARCHAR(100),
@CUENTA_BANCARIA VARCHAR(100),
@NUMERO_OPERACION VARCHAR(100),
@FECHA_PAGO DATE,
@INSTANCIA_PAGO VARCHAR(100)
AS
BEGIN
	INSERT INTO PAGO VALUES(@ID_BASE,@MONTO,@TIPO_PAGO,@CUENTA_BANCARIA,@NUMERO_OPERACION,@FECHA_PAGO,@INSTANCIA_PAGO)
END
GO
IF OBJECT_ID('SP_ACTUALIZAR_PAGO') IS NOT NULL
	DROP PROCEDURE SP_ACTUALIZAR_PAGO
GO
CREATE PROCEDURE SP_ACTUALIZAR_PAGO
@ID_PAGO INT,
@ID_BASE INT,
@MONTO DECIMAL(10,2),
@TIPO_PAGO VARCHAR(100),
@CUENTA_BANCARIA VARCHAR(100),
@NUMERO_OPERACION VARCHAR(100),
@FECHA_PAGO DATE,
@INSTANCIA_PAGO VARCHAR(100)
AS
BEGIN
	UPDATE PAGO 
	SET ID_BASE=@ID_BASE,MONTO=@MONTO,TIPO_PAGO=@TIPO_PAGO,CUENTA_BANCARIA=@CUENTA_BANCARIA,NUMERO_OPERACION=@NUMERO_OPERACION,
		FECHA_PAGO=@FECHA_PAGO,INSTANCIA_PAGO=@INSTANCIA_PAGO WHERE ID_PAGO=@ID_PAGO
END
GO
CREATE PROCEDURE SP_ELIMINAR_PAGO
@ID_PAGO INT
AS
BEGIN
	DELETE FROM PAGO WHERE ID_PAGO=@ID_PAGO
END
GO
---------------------------------------------------------Procedimientos para Stock
IF OBJECT_ID('SP_LISTAR_STOCK') IS NOT NULL
	DROP PROCEDURE SP_LISTAR_STOCK
GO
CREATE PROCEDURE SP_LISTAR_STOCK
AS
BEGIN
	SELECT*FROM STOCK
END
GO
IF OBJECT_ID('SP_GUARDAR_STOCK') IS NOT NULL
	DROP PROCEDURE SP_GUARDAR_STOCK
GO
CREATE PROCEDURE SP_GUARDAR_STOCK
@ALBUM INT,
@FECHA_CONSIGNACION DATE,
@MARCA VARCHAR(255),
@MODELO VARCHAR (255),
@PRECIO_PACTADO DECIMAL(10,2),
@CONTRATO INT,
@DNI VARCHAR(8),
@NOMBRE_PROPIETARIO VARCHAR(255),
@TIPO VARCHAR(10),
@CELULAR VARCHAR(9),
@CORREO VARCHAR(255),
@DIRECCION VARCHAR(255),
@DISTRITO VARCHAR(100),
@TIPO_PENALIDAD VARCHAR(255),
@PAGARE VARCHAR(6)
AS
BEGIN
	INSERT INTO STOCK VALUES(@ALBUM,@FECHA_CONSIGNACION,@MARCA,@MODELO,@PRECIO_PACTADO,@CONTRATO,@DNI,@NOMBRE_PROPIETARIO,@TIPO,
							 @CELULAR,@CORREO,@DIRECCION,@DISTRITO,@TIPO_PENALIDAD,@PAGARE) 
END
GO
CREATE PROCEDURE SP_ACTUALIZAR_STOCK
@ID_STOCK INT,
@ALBUM INT,
@FECHA_CONSIGNACION DATE,
@MARCA VARCHAR(255),
@MODELO VARCHAR (255),
@PRECIO_PACTADO DECIMAL(10,2),
@CONTRATO INT,
@DNI VARCHAR(8),
@NOMBRE_PROPIETARIO VARCHAR(255),
@TIPO VARCHAR(10),
@CELULAR VARCHAR(9),
@CORREO VARCHAR(255),
@DIRECCION VARCHAR(255),
@DISTRITO VARCHAR(100),
@TIPO_PENALIDAD VARCHAR(255),
@PAGARE VARCHAR(6)
AS
BEGIN
	UPDATE STOCK 
	SET ALBUM=@ALBUM,FECHA_CONSIGNACION=@FECHA_CONSIGNACION,MARCA=@MARCA,MODELO=@MODELO,PRECIO_PACTADO=@PRECIO_PACTADO,
	    CONTRATO=@CONTRATO,DNI=@DNI,NOMBRE_PROPIETARIO=@NOMBRE_PROPIETARIO,TIPO=@TIPO,CELULAR=@CELULAR,CORREO=@CORREO,
		DIRECCION=@DIRECCION,DISTRITO=@DISTRITO,TIPO_PENALIDAD=@TIPO_PENALIDAD,PAGARE=@PAGARE WHERE ID_STOCK=@ID_STOCK
END
GO
CREATE PROCEDURE SP_ELIMINAR_STOCK
@ID_STOCK INT
AS
BEGIN
	DELETE FROM STOCK WHERE ID_STOCK=@ID_STOCK
END
GO
CREATE PROCEDURE SP_ULTIMO_ID
AS
BEGIN
    SELECT TOP 1 ID_STOCK FROM STOCK ORDER BY ID_STOCK DESC
END
GO

EXEC SP_ULTIMO_ID
GO
-----------------------------PROCEDIMIENTOS PARA LA BASE GENERAL -----------------------------------------------------------------------
IF OBJECT_ID('SP_LISTAR_BASE_GENERAL') IS NOT NULL
	DROP PROCEDURE SP_LISTAR_BASE_GENERAL
GO
CREATE PROCEDURE SP_LISTAR_BASE_GENERAL
AS
BEGIN
	SELECT*FROM BASE_GENERAL
END
GO
IF OBJECT_ID('SP_GUARDAR_STOCK_GENERAL') IS NOT NULL
	DROP PROCEDURE SP_GUARDAR_STOCK_GENERAL
GO
CREATE PROCEDURE SP_GUARDAR_STOCK_GENERAL
@ID_STOCK INT
AS
BEGIN
	INSERT INTO BASE_GENERAL(ID_STOCK) VALUES (@ID_STOCK)
END
GO
IF OBJECT_ID('SP_GUARDAR_BASE_GENERAL') IS NOT NULL
	DROP PROCEDURE SP_GUARDAR_BASE_GENERAL
GO
CREATE PROCEDURE SP_GUARDAR_BASE_GENERAL
@ID_STOCK INT,
@FECHA_COBRO DATE,
@ID_STATUS_CLIENTE INT,
@ID_DEMANDA_PRINCIPAL INT,
@FECHA_INGRESO DATE,
@FECHA_ARBITRAJE DATE,
@PENALIDAD DECIMAL(10,2),
@MORA DECIMAL(10,2),
@GASTOS_COBRANZA DECIMAL(10,2),
@GASTOS_COCHERA DECIMAL(10,2),
@FECHA_EMBARGO DATE,
@STATUS_SUNARP VARCHAR(255),
@MARCA_AUTO_CAUTELAR VARCHAR(255),
@MODELO_AUTO_CAUTELAR VARCHAR(255),
@FECHA_AUTO_CAUTELAR DATE,
@PARTIDA_REGISTRAL_AUTO_CAUTELAR VARCHAR(8),
@PLACA_AUTO_CAUTELAR VARCHAR(6),
@ID_STATUS_JUDICIAL INT,
@ID_STATUS_PODER_JUDICIAL INT,
@ID_PASO_COBRANZA INT,
@FECHA_INGRESO_MC DATE,
@FECHA_CONCESORIO DATE,
@ID_APODERADO INT,
@ID_PROCURADOR INT,
@TIPO_JUZGADO VARCHAR(255),
@DISTRITO_JUZGADO VARCHAR(100),
@NUMERO_DE_JUZGADO VARCHAR(100),
@NUMERO_EXPEDIENTE VARCHAR(100),
@CODIGO_CAUTELAR VARCHAR(100),
@NOMBRE_ESPECIALISTA VARCHAR(100),
@MONTO_PETITORIO DECIMAL(10,2),
@ID_TIPO_IMPULSO INT,
@TIPO_SOLICITUD_MEDIDA_CAUTELAR VARCHAR(255),
@RESPUESTA_MEDIDA_CAUTELAR VARCHAR(255),
@OBSERVACIONES VARCHAR(255)
AS
BEGIN
	INSERT INTO BASE_GENERAL VALUES(@ID_STOCK,@FECHA_COBRO,@ID_STATUS_CLIENTE,@ID_DEMANDA_PRINCIPAL,@FECHA_INGRESO,@FECHA_ARBITRAJE,@PENALIDAD,@MORA,@GASTOS_COBRANZA,
									@GASTOS_COCHERA,@FECHA_EMBARGO,@STATUS_SUNARP,@MARCA_AUTO_CAUTELAR,@MODELO_AUTO_CAUTELAR,@FECHA_AUTO_CAUTELAR,@PARTIDA_REGISTRAL_AUTO_CAUTELAR,
									@PLACA_AUTO_CAUTELAR,@ID_STATUS_JUDICIAL,@ID_STATUS_PODER_JUDICIAL,@ID_PASO_COBRANZA,@FECHA_INGRESO_MC,@FECHA_CONCESORIO,
									@ID_APODERADO,@ID_PROCURADOR,@TIPO_JUZGADO,@DISTRITO_JUZGADO,@NUMERO_DE_JUZGADO,@NUMERO_EXPEDIENTE,@CODIGO_CAUTELAR,
									@NOMBRE_ESPECIALISTA,@MONTO_PETITORIO,@ID_TIPO_IMPULSO,@TIPO_SOLICITUD_MEDIDA_CAUTELAR,@RESPUESTA_MEDIDA_CAUTELAR,@OBSERVACIONES) 
END
GO
CREATE PROCEDURE SP_ACTUALIZAR_BASE_GENERAL
@ID_BASE INT,
@ID_STOCK INT,
@FECHA_COBRO DATE,
@ID_STATUS_CLIENTE INT,
@ID_DEMANDA_PRINCIPAL INT,
@FECHA_INGRESO DATE,
@FECHA_ARBITRAJE DATE,
@PENALIDAD DECIMAL(10,2),
@MORA DECIMAL(10,2),
@GASTOS_COBRANZA DECIMAL(10,2),
@GASTOS_COCHERA DECIMAL(10,2),
@FECHA_EMBARGO DATE,
@STATUS_SUNARP VARCHAR(255),
@MARCA_AUTO_CAUTELAR VARCHAR(255),
@MODELO_AUTO_CAUTELAR VARCHAR(255),
@FECHA_AUTO_CAUTELAR DATE,
@PARTIDA_REGISTRAL_AUTO_CAUTELAR VARCHAR(8),
@PLACA_AUTO_CAUTELAR VARCHAR(6),
@ID_STATUS_JUDICIAL INT,
@ID_STATUS_PODER_JUDICIAL INT,
@ID_PASO_COBRANZA INT,
@FECHA_INGRESO_MC DATE,
@FECHA_CONCESORIO DATE,
@ID_APODERADO INT,
@ID_PROCURADOR INT,
@TIPO_JUZGADO VARCHAR(255),
@DISTRITO_JUZGADO VARCHAR(100),
@NUMERO_DE_JUZGADO VARCHAR(100),
@NUMERO_EXPEDIENTE VARCHAR(100),
@CODIGO_CAUTELAR VARCHAR(100),
@NOMBRE_ESPECIALISTA VARCHAR(100),
@MONTO_PETITORIO DECIMAL(10,2),
@ID_TIPO_IMPULSO INT,
@TIPO_SOLICITUD_MEDIDA_CAUTELAR VARCHAR(255),
@RESPUESTA_MEDIDA_CAUTELAR VARCHAR(255),
@OBSERVACIONES VARCHAR(255)
AS
BEGIN
	UPDATE BASE_GENERAL 
	SET ID_STOCK=@ID_STOCK,FECHA_COBRO=@FECHA_COBRO,ID_STATUS_CLIENTE=@ID_STATUS_CLIENTE,ID_DEMANDA_PRINCIPAL=@ID_DEMANDA_PRINCIPAL,FECHA_INGRESO=@FECHA_INGRESO,FECHA_ARBITRAJE=@FECHA_ARBITRAJE,
		PENALIDAD=@PENALIDAD,MORA=@MORA,GASTOS_COBRANZA=@GASTOS_COBRANZA,GASTOS_COCHERA=@GASTOS_COCHERA,FECHA_EMBARGO=@FECHA_EMBARGO,STATUS_SUNARP=@STATUS_SUNARP,MARCA_AUTO_CAUTELAR=@MARCA_AUTO_CAUTELAR,
		MODELO_AUTO_CAUTELAR=@MODELO_AUTO_CAUTELAR,FECHA_AUTO_CAUTELAR=@FECHA_AUTO_CAUTELAR,PARTIDA_REGISTRAL_AUTO_CAUTELAR=@PARTIDA_REGISTRAL_AUTO_CAUTELAR,
		PLACA_AUTO_CAUTELAR=@PLACA_AUTO_CAUTELAR,ID_STATUS_JUDICIAL=@ID_STATUS_JUDICIAL,ID_STATUS_PODER_JUDICIAL=@ID_STATUS_PODER_JUDICIAL,ID_PASO_COBRANZA=@ID_PASO_COBRANZA,FECHA_INGRESO_MC=@FECHA_INGRESO_MC,
		FECHA_CONCESORIO=@FECHA_CONCESORIO,ID_APODERADO=@ID_APODERADO,ID_PROCURADOR=@ID_PROCURADOR,TIPO_JUZGADO=@TIPO_JUZGADO,DISTRITO_JUZGADO=@DISTRITO_JUZGADO,NUMERO_DE_JUZGADO=@NUMERO_DE_JUZGADO,
		NUMERO_EXPEDIENTE=@NUMERO_EXPEDIENTE,CODIGO_CAUTELAR=@CODIGO_CAUTELAR,NOMBRE_ESPECIALISTA=@NOMBRE_ESPECIALISTA,MONTO_PETITORIO=@MONTO_PETITORIO,
		ID_TIPO_IMPULSO=@ID_TIPO_IMPULSO,TIPO_SOLICITUD_MEDIDA_CAUTELAR=@TIPO_SOLICITUD_MEDIDA_CAUTELAR,RESPUESTA_MEDIDA_CAUTELAR=@RESPUESTA_MEDIDA_CAUTELAR,
		OBSERVACIONES=@OBSERVACIONES WHERE ID_BASE=@ID_BASE
END
GO
CREATE PROCEDURE SP_ELIMINAR_BASE_GENERAL
@ID_BASE INT
AS
BEGIN
	DELETE FROM BASE_GENERAL WHERE ID_BASE=@ID_BASE
END
GO


-------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------EJECUTAMOS ALGUNOS PROCEDIMIENTOS ALMACENADOS-----------------------------------------------------
exec SP_GUARDAR_USUARIO 'RONNY','18dejunio'
GO
exec SP_GUARDAR_ROL 'ADMINISTRADOR'
GO
exec SP_GUARDAR_ROL 'USUARIO'
GO
exec SP_GUARDAR_ROL 'COBRANZA'
GO
EXEC SP_ASIGNAR_ROL_USUARIO 1,1
GO
EXEC SP_ASIGNAR_ROL_USUARIO 1,2
GO
SELECT*FROM USUARIO
SELECT*FROM ROL
SELECT*FROM USUARIOS_ROLES
exec SP_LISTAR_PROCURADOR

exec SP_LISTAR_PROCURADORES_DISTRITO
--EXEC SP_GUARDAR_STOCK_GENERAL 1
GO
exec SP_GUARDAR_STATUS_JUDICIAL 'ESCRITO REALIZADO'
GO
exec SP_GUARDAR_STATUS_JUDICIAL 'ESCRITO INGRESADO - PENDIENTE LEGALIZAR FIRMA'
GO
exec SP_GUARDAR_STATUS_JUDICIAL 'CAUTELAR PRESENTADA - CON FIRMA LEGALIZADA'
GO
exec SP_GUARDAR_STATUS_JUDICIAL 'CAUTELAR PRESENTADA - EN APELACION'
GO
exec SP_GUARDAR_STATUS_JUDICIAL 'ESCRITO INGRESADO PARA DEVOLUCION DE ANEXOS'
GO
exec SP_GUARDAR_STATUS_JUDICIAL 'PENDIENTE DE INGRESAR ESCRITO PARA DEVOLUCION DE ANEXOS'
GO
exec SP_GUARDAR_STATUS_JUDICIAL 'REINGRESAR CAUTELAR'
GO
exec SP_GUARDAR_STATUS_PODER_JUDICIAL 'CONCEDIDO - FALTA OFICIAR'
GO
exec SP_GUARDAR_STATUS_PODER_JUDICIAL 'CONCEDIDO - OFICIADO (GOL)'
GO
exec SP_GUARDAR_STATUS_PODER_JUDICIAL 'CONCEDIDO - CON PEDIDO DE VARIACION'
GO
exec SP_GUARDAR_STATUS_PODER_JUDICIAL 'CONCEDIDO - CON PEDIDO DE INTEGRACION'
GO
exec SP_GUARDAR_STATUS_PODER_JUDICIAL 'CONCEDIDO - OFICIADO A LOS BANCOS'
GO
exec SP_GUARDAR_STATUS_PODER_JUDICIAL 'PENDIENTE DE PROVEER - MC'
GO
exec SP_GUARDAR_STATUS_PODER_JUDICIAL 'INADMISIBLE - PENDIENTE DE SUBSANAR'
GO
exec SP_GUARDAR_STATUS_PODER_JUDICIAL 'INADMISIBLE - PENDIENTE DE PROVEER 1 ERA SUBSANACION'
GO
exec SP_GUARDAR_STATUS_PODER_JUDICIAL 'INADMISIBLE - PENDIENTE DE PROVEER 2 DA SUBSANACION'
GO
exec SP_GUARDAR_STATUS_PODER_JUDICIAL 'IMPROCEDENTE'
GO
exec SP_GUARDAR_TIPO_IMPULSO'HACER IMPULSO PARA QUE ENTREGUEN OFICIOS'
exec SP_GUARDAR_TIPO_IMPULSO'TRABAJO TERMINADO'
exec SP_GUARDAR_TIPO_IMPULSO'IMPULSAR LA VARIACION'
exec SP_GUARDAR_TIPO_IMPULSO'IMPULSAR LA INTEGRACION'
exec SP_GUARDAR_TIPO_IMPULSO'OFICIADO A LOS BANCOS'
exec SP_GUARDAR_TIPO_IMPULSO'PENDIENTE DE PROVEER'
exec SP_GUARDAR_TIPO_IMPULSO'INFORMAR AL ABOGADO QUE TIENE QUE SUBSANAR'
exec SP_GUARDAR_TIPO_IMPULSO'INFORMAR CUANDO PROVEEN 2 DA RESOLUCION'
exec SP_GUARDAR_TIPO_IMPULSO'INFORMAR CUANDO PROVEEN 3 RA RESOLUCION'
exec SP_GUARDAR_TIPO_IMPULSO'IMPROCEDENTE'
exec SP_GUARDAR_TIPO_IMPULSO'11'
exec SP_GUARDAR_TIPO_IMPULSO'12'
exec SP_GUARDAR_TIPO_IMPULSO'13'
exec SP_GUARDAR_TIPO_IMPULSO'14'
exec SP_GUARDAR_TIPO_IMPULSO'15'
exec SP_GUARDAR_TIPO_IMPULSO'16'
exec SP_GUARDAR_TIPO_IMPULSO'17'
exec SP_GUARDAR_TIPO_IMPULSO'18'
exec SP_GUARDAR_TIPO_IMPULSO'19'
exec SP_GUARDAR_TIPO_IMPULSO'20'
exec SP_GUARDAR_TIPO_IMPULSO'IR A LEGALIZAR FIRMAS Y RECOGER OFICIOS'
exec SP_GUARDAR_TIPO_IMPULSO'21'
exec SP_GUARDAR_TIPO_IMPULSO'22'
exec SP_GUARDAR_TIPO_IMPULSO'23'
exec SP_GUARDAR_TIPO_IMPULSO'24'
exec SP_GUARDAR_TIPO_IMPULSO'IR A A LEGALIZAR FIRMA O IMPULSAR PARA SACAR RESOLUCION'
exec SP_GUARDAR_TIPO_IMPULSO'26'
exec SP_GUARDAR_TIPO_IMPULSO'27'
exec SP_GUARDAR_TIPO_IMPULSO'28'
exec SP_GUARDAR_TIPO_IMPULSO'29'
exec SP_GUARDAR_TIPO_IMPULSO'HACER LECTURA DE EXPEDIENTE PARA VER BANCOS QUE FALTAN RESPONDER'
exec SP_GUARDAR_TIPO_IMPULSO'31'
exec SP_GUARDAR_TIPO_IMPULSO'32'
exec SP_GUARDAR_TIPO_IMPULSO'33'
exec SP_GUARDAR_TIPO_IMPULSO'QUE DIA VAN A PROVEER 1 RA RESOLUCION'
exec SP_GUARDAR_TIPO_IMPULSO'HABLAR CON LAS ABOGADAS PARA LA SUBSANACION'
exec SP_GUARDAR_TIPO_IMPULSO'QUE DIA VAN A PROVEER 2DA RESOLUCION'
exec SP_GUARDAR_TIPO_IMPULSO'QUE DIA VAN A PROVEER 3RA RESOLUCION'
exec SP_GUARDAR_TIPO_IMPULSO'37'
exec SP_GUARDAR_TIPO_IMPULSO'38'
exec SP_GUARDAR_TIPO_IMPULSO'39'
exec SP_GUARDAR_TIPO_IMPULSO'40'
exec SP_GUARDAR_TIPO_IMPULSO'41'
exec SP_GUARDAR_TIPO_IMPULSO'42'
exec SP_GUARDAR_TIPO_IMPULSO'43'
exec SP_GUARDAR_TIPO_IMPULSO'44'
exec SP_GUARDAR_TIPO_IMPULSO'45'
exec SP_GUARDAR_TIPO_IMPULSO'46'
exec SP_GUARDAR_TIPO_IMPULSO'INFORMAR A LAS ABOGADAS QUE LA CAUTELAR FUE IMPROCEDENTE'
exec SP_GUARDAR_TIPO_IMPULSO'48'
exec SP_GUARDAR_TIPO_IMPULSO'49'
exec SP_GUARDAR_TIPO_IMPULSO'50'
exec SP_GUARDAR_TIPO_IMPULSO'51'
exec SP_GUARDAR_TIPO_IMPULSO'52'
exec SP_GUARDAR_TIPO_IMPULSO'53'
exec SP_GUARDAR_TIPO_IMPULSO'54'
exec SP_GUARDAR_TIPO_IMPULSO'55'
exec SP_GUARDAR_TIPO_IMPULSO'56'
exec SP_GUARDAR_TIPO_IMPULSO'57'
exec SP_GUARDAR_TIPO_IMPULSO'58'
exec SP_GUARDAR_TIPO_IMPULSO'59'
exec SP_GUARDAR_TIPO_IMPULSO'60'
exec SP_GUARDAR_TIPO_IMPULSO'61'
exec SP_GUARDAR_TIPO_IMPULSO'62'
exec SP_GUARDAR_TIPO_IMPULSO'63'
exec SP_GUARDAR_TIPO_IMPULSO'64'
exec SP_GUARDAR_TIPO_IMPULSO'65'
exec SP_GUARDAR_TIPO_IMPULSO'66'
exec SP_GUARDAR_TIPO_IMPULSO'67'
exec SP_GUARDAR_TIPO_IMPULSO'68'
exec SP_GUARDAR_TIPO_IMPULSO'69'
exec SP_GUARDAR_TIPO_IMPULSO'70'
exec SP_GUARDAR_TIPO_IMPULSO'71'
exec SP_GUARDAR_TIPO_IMPULSO'72'
exec SP_GUARDAR_TIPO_IMPULSO'73'
exec SP_GUARDAR_TIPO_IMPULSO'74'
exec SP_GUARDAR_TIPO_IMPULSO'75'
exec SP_GUARDAR_TIPO_IMPULSO'76'
exec SP_GUARDAR_TIPO_IMPULSO'77'
exec SP_GUARDAR_TIPO_IMPULSO'79'
exec SP_GUARDAR_TIPO_IMPULSO'QUE FECHA PODEMOS LEGALIZAR'
exec SP_GUARDAR_TIPO_IMPULSO'81'
exec SP_GUARDAR_TIPO_IMPULSO'HACER IMPULSO DE APELACION'
exec SP_GUARDAR_TIPO_IMPULSO'HACER IMPULSO PARA QUE NOS DEVUELVAN LOS ANEXOS'
exec SP_GUARDAR_TIPO_IMPULSO'84'
exec SP_GUARDAR_TIPO_IMPULSO'85'
exec SP_GUARDAR_TIPO_IMPULSO'86'
exec SP_GUARDAR_STATUS_ARBITRAJE 'CON CARTA DE 48 HORAS - PENDIENTE DE MANDAR INVITACION ARBITRAL'
exec SP_GUARDAR_STATUS_ARBITRAJE 'CON CAUTELAR INSCRITA - EN ARBITRAJE'
exec SP_GUARDAR_STATUS_ARBITRAJE 'CLIENTE CON INVITACION A ARBITRAJE'
exec SP_GUARDAR_STATUS_ARBITRAJE 'CLIENTE CON ACEPTACION DE ARBITRAJE'
exec SP_GUARDAR_STATUS_ARBITRAJE 'CON ARBITRAJE - CLIENTE NOTIFICADO'
exec SP_GUARDAR_STATUS_ARBITRAJE 'CON ARBITRAJE - CLIENTE FALTA NOTIFICAR NOTARIAL'
exec SP_GUARDAR_STATUS_ARBITRAJE 'CON ARBITRAJE - CLIENTE FALTA NOTIFICAR EDICTO'
exec SP_GUARDAR_STATUS_ARBITRAJE 'CON ARBITRAJE - CON ARBITRO ASIGNADO'
exec SP_GUARDAR_STATUS_ARBITRAJE 'CON ARBITRAJE - CON ARBITRO ASIGNADO Y ACEPTADO NOTIFICAR NOTARIAL'
exec SP_GUARDAR_STATUS_ARBITRAJE 'CON ARBITRAJE - CON ARBITRO ASIGNADO Y ACEPTADO'
exec SP_GUARDAR_STATUS_ARBITRAJE 'CON ARBITRAJE - PENDIENTE DE PLAZOS PARA PRESENTAR DEMANDA (10 DIAS)'
exec SP_GUARDAR_STATUS_ARBITRAJE 'CON ARBITRAJE - PENDIENTE DE PRESENTAR DEMANDA'
exec SP_GUARDAR_STATUS_ARBITRAJE 'CON ARBITRAJE - DEMANDA PRESENTADA'
exec SP_GUARDAR_STATUS_ARBITRAJE 'CON ARBITRAJE - DEMANDA ADMITIDA'
exec SP_GUARDAR_STATUS_ARBITRAJE 'CON ARBITRAJE - FIJACION DE PUNTOS CONTROVERSIALES'
exec SP_GUARDAR_STATUS_ARBITRAJE 'CON ARBITRAJE - PARA FIJAR FECHA DE AUDIENCIA'
exec SP_GUARDAR_STATUS_ARBITRAJE 'CON ARBITRAJE - PRESENTACION DE ALEGATOS FINALES'
exec SP_GUARDAR_STATUS_ARBITRAJE 'CON ARBITRAJE - LAUDO GANADO'
exec SP_GUARDAR_PASO_COBRANZA 'PENDIENTE'
exec SP_GUARDAR_PASO_COBRANZA 'CARTA DE RESOLUCION ENVIADA'
exec SP_GUARDAR_PASO_COBRANZA 'WHATSAPP DE COBRANZA 1'
exec SP_GUARDAR_PASO_COBRANZA 'WHATSAPP DE COBRANZA 2'
exec SP_GUARDAR_PASO_COBRANZA 'CARTA DE PRE AVISO 48 HORAS INFOCORP'
exec SP_GUARDAR_PASO_COBRANZA 'COBRANZA EXTRAJUDICIAL FINALIZADA'
select*from stock

GO
CREATE TRIGGER TRG_ACTUALIZAR_GASTO_TOTAL
ON PAGO
AFTER INSERT, UPDATE
AS
BEGIN
    SET NOCOUNT ON

    -- Actualizar GASTO_TOTAL en BASE_GENERAL
    UPDATE BASE_GENERAL
    SET GASTO_TOTAL = 
        (CASE
            WHEN DATEDIFF(DAY, FECHA_EMBARGO, GETDATE()) <= 2 THEN 0.00
            ELSE GASTOS_COCHERA * (DATEDIFF(DAY, FECHA_EMBARGO, GETDATE()) - 2)
        END) + 
        (CASE
            WHEN DATEDIFF(DAY, FECHA_COBRO, GETDATE()) <= 2 THEN 0.00
            ELSE MORA * (DATEDIFF(DAY, FECHA_COBRO, GETDATE()) - 2)
        END) + PENALIDAD + GASTOS_COBRANZA
        - (SELECT ISNULL(SUM(MONTO), 0.00) FROM PAGO WHERE ID_BASE = BASE_GENERAL.ID_BASE)
    FROM BASE_GENERAL bg
    INNER JOIN INSERTED i ON bg.ID_BASE = i.ID_BASE;

END
GO